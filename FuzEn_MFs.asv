function entr = FuzEn_MFs(ts, m, mf, rn, local, tau)
    narginchk(3, 6);
    
    if nargin < 6
        tau = 1;
    end
    
    if nargin < 5
        local = 0;
    end
    
    if nargin < 4
        rn = 0.2 * std(ts);
        local = 0;
        tau = 1;
    end

    N = length(ts);

    % Reconstruction
    indm = hankel(1:N-m*tau, N-m*tau:N-tau);
    indm = indm(:, 1:tau:end);
    ym = ts(indm);

    inda = hankel(1:N-m*tau, N-m*tau:N);
    inda = inda(:, 1:tau:end);
    ya = ts(inda);

    if local
        ym = ym - mean(ym, 2) * ones(1, m);
        ya = ya - mean(ya, 2) * ones(1, m+1);
    end
   ym = single(ym);
   ya = single(ya);

  
    % Inter-vector distance
    cheb = pdist(ym, 'chebychev');
    cm = feval(mf, cheb, rn);

    cheb = pdist(ya, 'chebychev');
    ca = feval(mf, cheb, rn);

    % Output
    entr = -log(sum(ca) / sum(cm));

    clear ym ya cheb cm ca;
end

% Membership functions
function c = Triangular(dist, rn)
    c = zeros(size(dist));
    c(dist <= rn) = 1 - dist(dist <= rn) ./ rn;
end

function c = Trapezoidal(dist, rn)
    c = zeros(size(dist));
    c(dist <= rn) = 1;
    c(dist <= 2 * rn & dist > rn) = 2 - dist(dist <= 2 * rn & dist > rn) ./ rn;
end

function c = Z_shaped(dist, rn)
    c = zeros(size(dist));
    r1 = dist <= rn;
    r2 = dist > rn & dist <= 1.5 * rn;
    r3 = dist > 1.5 * rn & dist <= 2 * rn;
    c(r1) = 1;
    c(r2) = 1 - 2 * ((dist(r2) - rn) ./ rn).^2;
    c(r3) = 2 * ((dist(r3) - 2 * rn) ./ rn).^2;
end

function c = Bell_shaped(dist, rn)
    c = 1 ./ (1 + abs(dist ./ rn(1)).^(2 * rn(2)));
end

function c = Gaussian(dist, rn)
    c = exp(-(dist./(sqrt(2) * rn)).^2);
end

function c = Constant_Gaussian(dist, rn)
    c = ones(size(dist));
    c(dist > rn) = exp(-log(2) .* ((dist(dist > rn) - rn) ./ rn).^2);
end

function c = Exponential(dist, rn)
    c = exp(-dist.^rn(2) ./ rn(1));
end